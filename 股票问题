NO.121 买卖股票的最佳时机
法一：暴力法（超时）
找出给定数组中的最大差值，且第二个数字必须大于第一个数字
def maxProfit(self, prices: List[int]) -> int:
        ans = 0
        for i in range(len(prices)):
            for j in range(i+1, len(prices)):
                ans = max(prices[j] - prices[i], ans)
        return ans

法二：一次遍历
更新前i天的最低价格，即最低买入成本cost
更新前i天的最高利润，即前i-1天最高利润和第i天卖出的利润price[i]-cost中的最大值
def maxProfit(self, prices: List[int]) -> int:
        cost, profit = prices[0], 0
        for price in prices:
            cost = min(cost, price)
            profit = max(profit, price - cost)
        return profit

NO.122 买卖股票的最佳时机II
法一：贪心算法
所有上涨交易日都买卖，所有下降交易日都不买卖
def maxProfit(self, prices: List[int]) -> int:
        ans = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i-1]:
                ans += prices[i] - prices[i-1]
        return ans
法二：动态规划
dp[i][0]表示第i天交易完成后手里没有股票的最大利润，dp[i][1]表示第i天交易完后手里持有一只股票的最大利润
dp[i][0]的转移方程：这一天交易完成后手里没有股票，那么可能是前一天没有股票，即dp[i-1][0], 或者前一天结束有一支股票dp[i-1][1]但今天卖出prices[i], 故转移方程dp[i][0] = max{dp[i-1][0], dp[i-1][1] + prices[i]}
dp[i][1]的转移方程：若前一天已经有股票即dp[i-1][1]，或者没股票dp[i-1][0]但今天买入-prices[i]，其转移方程dp[i][1] = max{dp[i-1][1], dp[i-1][0] - prices[i]}
第0天时，初始状态dp[0][0] = 0, dp[0][1] = - prices[0], 从前往后计算交易状态，最后答案为dp[n-1][0]
*python建立二维数组[[0]*2] for _ in range(n)表示建立一个n行两列的数组，Java里面表示为[n][2],注意转移方程从1开始，第0天为特殊状态
def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        dp = [[0] * 2 for _ in range(n)] #这样才是n行2列的数组
        dp[0][0], dp[0][1] = 0, -prices[0]
        for i in range(1, n): #从第1天开始而不是第0天
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]) #卖出
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]) #买入
        return dp[n-1][0]
法三：动态规划优化
def maxProfit(self, prices: List[int]) -> int:
        dp0, dp1 = 0, -prices[0]
        for i in range(1, len(prices)): #从第1天开始而不是第0天
            dp0 = max(dp0, dp1 + prices[i]) #卖出
            dp1 = max(dp1, dp0 - prices[i]) #买入
        return dp0 #最后返回卖出的状态

NO.714 买卖股票的最佳时机（含手续费）
动态规划问题，通过3个问题进行基本拆解
1、问题是否分阶段，阶段是什么？
2、问题最优解有关的子问题是什么？
3、具体状态是什么样的？
buy[i]/sell[i]分别表示第i天买入/卖出股票可以获得的累计最佳收益。
buy[i]第i日收益有两种情况：什么也不做等同于最近一次买入操作收入buy[i-1]; 买入等于最近一次卖出收益减去今天买入的花费
buy[i] = max(buy[i-1], sell[i-1] - prices[i])
sell[i]卖出也有两种情况：什么也不做等于前一天卖出收益sell[i-1]; 卖出等于前一日买入加上今天卖出收益再减去手续费
sell[i] = max(sell[i-1], buy[i-1]+ prices[i] -fee)
def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)
        buy, sell = [0] * n, [0] * n
        buy[0] = -prices[0]
        for i in range(1, n):
            buy[i] = max(buy[i-1], sell[i-1] - prices[i])
            sell[i] = max(sell[i-1], buy[i-1] + prices[i] - fee)
        return sell[-1]
动态规划的局部最优解不一定被采纳，而贪心算法是通过局部最优解产生全局最优解，这是动态规划与贪心算法的最大区别

NO.309 买卖股票的最佳时机（含冷冻期）
买入状态buy[i]的两种情况：什么也不做，等于昨日buy[i-1]; 买入，最近一次卖出减去买入花费，由于存在冷冻期，第i日买入则第i-1日不能卖出，只能
第i-2日卖出；取两者的最大值buy[i] = max(buy[i-1], sell[i-2] - prices[i])
卖出状态sell[i]的两种情况：什么也不做等于前一日的收益sell[i-1]；卖出收益等于前一天买入加上今天卖出收益
取两者最大值，sell[i] = max(sell[i-1], buy[i-1] + prices[i])
此题中，需从第3个交易日开始，因为有冷冻期，将第2天的单独处理
buy[0]= -prices[0]
buy[1] = max(buy[0], 0- prices[1])
sell[1] = max(sell[0], buy[0] + prices[1])

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n <= 1:
            return 0
        buy, sell = [0] * n, [0] * n
        buy[0] = -prices[0]
        buy[1] = max(buy[0], 0-prices[1])
        sell[1] = max(sell[0], buy[0] + prices[1])
        for i in range(2, n):
            buy[i] = max(buy[i-1], sell[i-2] - prices[i])
            sell[i] = max(sell[i-1], buy[i-1] + prices[i])
        return sell[-1]

NO.188买卖股票的最佳时机IV
def maxProfit(self, k: int, prices: List[int]) -> int:
        k = min(k, len(prices) // 2)
        buy = [-sys.maxsize] * (k+1)
        sell = [0] * (k+1)
        for p in prices:
            for i in range(1, k+1):
                buy[i] = max(buy[i], sell[i-1] - p)
                sell[i] = max(sell[i], buy[i] + p)
        return sell[-1]
