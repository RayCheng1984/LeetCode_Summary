NO.229 求众数II(此题不一定存在符合条件的元素，因此还需检验）
法一：直接统计，如果大于1/3，加入到答案里面，缺点是不满足空间复杂度为O(1)
def majorityElement(self, nums: List[int]) -> List[int]:
        ans = []
        counter = Counter(nums)
        for item in counter.keys():
            if counter[item] > len(nums) // 3:
                ans.append(item)
        return ans
法二：摩尔投票法
NO.229 求众数II
法一：直接统计，如果大于1/3，加入到答案里面，缺点是不满足空间复杂度为O(1)
def majorityElement(self, nums: List[int]) -> List[int]:
        ans = []
        counter = Counter(nums)
        for item in counter.keys():
            if counter[item] > len(nums) // 3:
                ans.append(item)
        return ans
法二：摩尔投票法
def majorityElement(self, nums: List[int]) -> List[int]:
        count1 = count2 = 0
        n1 = n2 = None
        ans = []
        for num in nums:#先找到最多的两个数,分别是n1和n2
            if num == n1:#累加次数
                count1 += 1
            elif num == n2:
                count2 += 1
            elif count1 == 0:#不够抵消，换个数
                n1 = num
                count1 += 1
            elif count2 == 0:
                n2 = num
                count2 += 1
            else:#抵消
                count1 -= 1
                count2 -= 1
        
        count3 = count4 = 0
        for num in nums:#统计最多的两个数的数量
            if num == n1:
                count3 += 1
            if num == n2:
                count4 += 1
        if count3 > len(nums)//3:#判断两个数是否大于1/3
            ans.append(n1)
        if count4 > len(nums)//3:
            ans.append(n2)
        return ans

NO.169 多数元素（题目说一定存在符合条件的元素，可以不检查）
法一：哈希表
max(iterable, *[, key, default]):去传入可迭代对象中最大值。数值型参数，取值大的；字符型参数，取字母靠后的；还可以用key指定一个函数指定获取最大值的方法。default方法用来指定最大值不存在时返回的默认值。这两个参数都是可选的
max(count.keys(), key = count.get):对count.keys的键进行排序，排序是按照get方法得到的值的大小，选最大的输出。
def majorityElement(self, nums: List[int]) -> int:
        counter = Counter(nums)
        return max(counter.keys(), key = counter.get)
法二：排序法
(n//2)处的元素是众数
def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        return nums[len(nums)//2]
法三：摩尔投票法
def majorityElement(self, nums: List[int]) -> int:
        count = 0
        candidate = None
        for num in nums:
            if count == 0:#不够抵消时换一个
                candidate = num
            if num == candidate:#累积一个
                count += 1
            else:#抵消一个
                count -= 1
        return candidate

NO.84 柱状图中最大的矩形
在一维数组中对每一个数找到第一个比自己小的元素（这是典型的单调栈应用场景）
单调栈：单调递增的序列
