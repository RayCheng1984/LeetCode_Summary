NO.155 最小栈
此题重点是在常数时间内检索到最小元素的栈
入栈：在栈内保存元组(当前值, 栈内最小值)
出栈：pop()函数删除栈顶元素
栈顶值:top()栈顶元素的第一个值
最小值:getMin()栈顶元素的第二个值
***注意：在判断栈是否为空时， not self.stack != self.stack is None， 因为栈已经建立，所有not self.stack是false, 但是self.stack is None是True

元组与列表类似，但是元组不能更改，元组使用小括号，列表使用方括号
Python里的self:
self代表类的实例，而非类
self的主要作用是允许类的实例方法访问类的属性和其他方法


NO.208 实现Trie树(前缀树)
ord函数：ord(c)其中c为字符，返回其对应的十进制整数
查找前缀：枚举前缀的每一位，看字符串是否存在字符的当前为是这个位，若存在，就在符合要求的字符串中去查找下一位
插入字符串：
如果当前节点子节点列中， ch位置没有节点，则新建一个节点；然后更新node为子节点，加入下一个字符，node初始为前缀树的根节点root
查找前缀：
与插入过程类似，如果当前节点的子节点列表中，ch位置没有节点，说明匹配不上，前缀不存在退出查找，否则更新node为子节点，寻找下一个字符，node初始为前缀树的根节点root
标志位标记文章字符串：如何判断是一个完整字符串还是某个字符串的前缀？
引入标志标记位完整串，在插入最后一个字符后其标志位为True

三个函数模式差不多，这是最后返回值略有不同
self.root = {}

node = self.root
for c in word:
if c not in node:
node[c] = {}
node = node[c]
node['#'] in node
