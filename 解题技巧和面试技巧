解题模板
识别问题类型，快速在模板库中挑选模板
小技巧，如预处理

一、看限制条件
1、数据规模
NO.1284 转化为全零矩阵的最少反转次数

bin()函数：返回一个整数的二进制表示，返回一个字符串
hex()函数：将整数转换为十六进制字符串表示
oct():将整数转换为八进制字符串表示
str():将对象转换为字符串
count()方法：统计字符串里某个字符或子字符串出现的次数，用法：str.count(sub, start = 0, end = len(string))字符串搜索位置默认为最开始和最末尾
对十进制整数x, 可以用x & (1 << k)来判断x的第k位是否为1，即当值大于0时，第k位为1（k从0开始）

左移运算符<<： a<<n表示将a的二进制向左移动n位，右边的空位用0填充。数学上相当于将原数乘以2的n次方
右移运算符>>: 右移n位然后与1，即将第n位移到最低位，可以检查该位是否为1.

class Solution:
    def minFlips(self, mat: List[List[int]]) -> int:
        n, m = len(mat), len(mat[0])#求矩阵的长宽
        ans = 10 #最多是3*3矩阵，最多翻转9次，设置一个大于9的次数
        for i in range(1 << (n*m)):#m*n矩阵最多有2^(n*m)种排列结果，1左移n*m位，range不包含右端点，则其范围是0~1(1 << (n*m))-1,共2^(n*m)种结果，两者等价
            temp = [[0]*m for _ in range(n)]#建立一个临时矩阵
            for j in range(n):#行
                for k in range(m):#列
                    if (i >> (j*m + k)) & 1:#右移，将i的第j*m+k移到最低位然后按位与1,可以检查第j*m+k位是否为1，从而决定是否翻转该位
                        temp[j][k] = 1 - temp[j][k]#是1翻转该位
                        if j > 0:#检查相邻的上一格
                            temp[j-1][k] = 1 - temp[j-1][k]
                        if k > 0:#检查相邻的左一格
                            temp[j][k-1] = 1 - temp[j][k-1]
                        if j + 1 < n:#检查相邻的下一格
                            temp[j+1][k] = 1 - temp[j+1][k]
                        if k + 1 < m:#检查相邻的右一格
                            temp[j][k+1] = 1 - temp[j][k+1]
            if temp == mat:#如果临时矩阵翻转后等于原矩阵，更新最小翻转次数
                ans = min(ans, bin(i).count('1'))#计算i的二进制表示中1的个数就是翻转次数
        return ans if ans != 10 else -1

2、 复杂度
NO.73 矩阵置零
常数空间复杂度，应该使用原地算法
法一：用O(m+n)额外空间
扫两遍matrix，第一遍用集合记录哪些行列有0，第二遍置0.
class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        row, col = len(matrix), len(matrix[0])#行列长度
        row_0 = set()#用集合存储有0的行索引
        col_0 = set()#用集合存储有0的列索引
        for i in range(row):#遍历找有0的行列
            for j in range(col):
                if matrix[i][j] == 0:#当某个位置是0时
                    row_0.add(i)#将行索引存到集合里
                    col_0.add(j)#将列索引存到集合里
        for i in  range(row):#遍历置0
            for j in range(col):
                if i in row_0 or j in col_0:#当某行或某列在0集合里
                    matrix[i][j] = 0#将对应的整行/整列置0

法二：原地算法
用O(1)空间，第1行/列用作标记
class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        row, col = len(matrix), len(matrix[0])#求行、列数目
        row_0 = col_0 = False#设置第一行/列原本是否有0
        for i in range(row):#检查第1列
            if matrix[i][0] == 0:
                col_0 = True#修改标记
        for j in range(col):#检查第1行
            if matrix[0][j] == 0:
                row_0 = True
        for i in range(1, row):#检查除标记行/列以外的地方是否有0
            for j in range(1, col):
                if matrix[i][j] == 0:#有
                    matrix[i][0] = matrix[0][j] = 0#在第一行/列用0进行标记
        for i in range(1, row):#再次遍历
            for j in range(1, col):
                if matrix[i][0] == 0 or matrix[0][j] == 0:#标记行/列为0
                    matrix[i][j] = 0#将对应位置置0，
        if row_0:#第一行有0
            for j in range(col):#将对应的列置为0
                matrix[0][j] = 0

        if col_0:#第1列有0
            for i in range(row):#将对应的行置为0
                matrix[i][0] = 0

二、预处理
打表：提前将计算结果存起来，在实际的计算中直接使用。打表是空间换实际，其空间复杂度是O(1)
1、顺次数
NO.1291
法一：
class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        number = '123456789'#包含所有连续数字的字符串
        n = len(number)#长度
        ans = []#存储答案
        for i in range(1, n):#控制生成数字的长度
            for j in range(n-i):#控制字符串从哪个位置开始截取,j从0到n减去当前数字的长度
                ans.append(int(number[j:i+j+1]))#截取
        return [x for x in ans if x >= low and x <= high]#筛选low到high中间的结果

法二：
bisect.bisect_left(a,x,lo=0,high=len(a),key=None):查找目标元素左侧插入点
bisect.bisecct与bisect.bisect_right等价，查找目标元素右侧插入点
只有最后筛选用了二分法，其他一样
class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        number = '123456789'#包含所有连续数字的字符串
        n = len(number)
        ans = []
        for i in range(1, n):#i表示目标数字的位数
            for j in range(n-i):#j表示从字符串的第j位开始截取i位数字
                ans.append(int(number[j:i+j+1]))#截取并转换为整数
        return ans[bisect.bisect_left(ans, low): bisect.bisect(ans, high)]#bisect_left找到第一个>=low的位置，bisect找到第一个大于high的位置

法三：
