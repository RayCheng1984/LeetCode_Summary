NO.191 位1的个数
法一：利用掩码与待检测数进行与操作，使用左移运算将每位进行与操作，然后计数器加1
for i in range(32):if n & (1<<i):count +=1
法二：将低位且值为1的比特位翻转为0，计数器加1；当整数为0时，该整数不包含任何为1的比特位，返回计数器的值，可以使用n&(n-1)翻转最低有效位的比特值为0
while n:count += 1, n = n&(n-1)

NO.371 实现加法
a + b的值为相加后的进位值+原位值
使用与操作和移位操作，计算两数相加后的进位值
使用异或操作，计算两数相加后的原位值
循环上面过程，直至进位值为0

mask = 0xffffffff构造了一个32位整数的限定器，用于限定符号
while b & mask != 0:
carry = （a&b) << 1; a = a^b; b = carry ###备注这里b表示进位值，a表示原位值

mask = 0xffffffff构造了一个32位整数的限定器，用于限定符号
while b & mask != 0: #因为mask为确定值且不为0， 则此处b != 0 或者防止进位值过大
carry = （a&b) << 1; a = a^b; b = carry ###备注这里b表示进位值，a表示原位值
python里面整型无限长，因此需要对其2**32取模使得33位及以上均为0，则当b > mask时， 需返回a & mask，否则返回a

NO.397 整数替换
法一：递归法
n为偶数， n = n /2， 计数器加1
n为奇数： n = n + 1或 n - 1里面较小的那个，
n == 1时跳出
if n == 1: return 0
elif n % 2 == 0: return 1 + self.integerReplacement(n // 2)
else: return 1 + min(self.integerReplacement(n + 1), self.integerReplacement(n - 1))

法二：位操作
n为偶数， n = n /2 #实际处理中，与1做与运算，若为0，则为偶数，并且向右移1位
n为奇数，若n的二进制后两位为01（即跟2做与操作为0），或者n==3： n = n-1
        若若n的二进制后两位为11，则n = n + 1
while n != 1:
if n & 1 == 0: n >>= 1
else: if n & 2 ==0 or n == 3: n -=1
      else: n += 1
count += 1

lamda函数：lamda [arg1 [,arg2, ]]:expression
arg是参数列表，expression是表达式，计算并返回函数结果
lamda常与内置函数map()、reduce()、filter()等一起使用

map()函数根据提供的函数对指定序列做映射
map(function, iterable)
function对参数序列中的每一个参数调用function函数，最后每次返回包含function返回值的新列表
map(lamda x: x**2, [1,2,3,4,5])

reduce()函数：对参数序列中的元素进行累积
reduce(function函数，iterable可迭代对象）：用传给reduce中的function先对集合的第1、2个元素进行操作，
得到的结果再按照function的规则与第三个数进行运算
reduce(lamda x,y: x + y, [1,2,3,4,5])

sorted()函数：对可迭代对象进行排序操作
sort VS sorted: sort是list的一个方法，而sorted能对所有可迭代对象进行排序
sort是对已经存在的列表进行操作，无返回值，而sorted返回的是一个新的迭代对象，而不是在原有的基础上操作
sorted(iterable, key = None, reverse = False)
iterable是可迭代对象，key主要是用来进行比较的元素，reverse = True，降序；reverse = False，升序
student = [('alice', 'female', '15'), ('bob', 'male', '13'), ('chuchu', 'male', '10')]
sorted(student, key = lamda s: s[2])

filter()函数：用于过滤序列，过滤掉不符合条件的元素，返回由符合条件的元素组成的新列表
filter(function, iterable)序列的每个元素作为参数传给函数判断，返回True或False，最后将返回True的元素放到新列表中
list = filter(lamda x: x % 3 == 0, [1, 2, 3])

字典的get()方法：返回指定键的值
dict.get(key [,value])
key:字典中要查找的键
value：可选，如果指定键的值不存在时，返回该默认值；不设置返回None
get()方法 VS dict[key]:
get(key)：键不存在时，返回None或设置好的默认值
dict[key]: 键不存在时，会触发keyerror异常
eg: 统计列表中元素出现的次数
list = ['a','b','c','a']
dict = {}
for i in list:
dict[i] = dict.get(i, 0) + 1

NO.136 只出现一次的数字
法一：哈希表法
遍历数组中的所有元素，设置键值对； 返回只出现了一次的元素
hashmap = {}
for i in nums:
        if i not in hashmap:
                hashmap[i] = 1
        else:
                hashmap[i += 1
for i in hashmap:
        if hashmap[i] == 1:
                return i

也可以用get()方法遍历：
for i in nums:
        hashmap[i] = hashmap.get(i, 0) + 1

法二：数学方法
2 * sum(set(nums)) - sum(nums)
法一和法二的空间复杂度都是O(n)

法三：异或法：
异或操作满足交换律即a^b^a == a^a^b，将数组中所有元素做异或操作，剩下的值即为出现一次的元素
result = 0
for i in range(len(nums)):
        result ^= nums[i]

reduce(lamda x,y: x ^ y, nums)

NO.137 只出现一次的数字II




NO.260 只出现一次的数字III
法一：哈希表法
做法同NO.136, 不过需要一个列表，将符号条件的数添加的列表里， 最后返回列表
法二：
异或性质:相同得0， 不同得1
0与任何数异或得原数， 数异或本身为0
全部数字异或，得到是这两个不同数的异或结果，就知道哪些位是不同的
根据这个不同位将数字分成两组，重新异或
两个不同的数在两组，其他仍然相同
for i in nums:
ans ^= i
ans &= -ans
ans1 = ans2 = 0
for i in nums:
if ans & i:
ans1 ^= i
else:
ans2 ^= i
return [ans1, ans2]
