NO.191 位1的个数
法一：利用掩码与待检测数进行与操作，使用左移运算将每位进行与操作，然后计数器加1
for i in range(32):if n & (1<<i):count +=1
法二：将低位且值为1的比特位翻转为0，计数器加1；当整数为0时，该整数不包含任何为1的比特位，返回计数器的值，可以使用n&(n-1)翻转最低有效位的比特值为0
while n:count += 1, n = n&(n-1)

NO.371 实现加法
a + b的值为相加后的进位值+原位值
使用与操作和移位操作，计算两数相加后的进位值
使用异或操作，计算两数相加后的原位值
循环上面过程，直至进位值为0

mask = 0xffffffff构造了一个32位整数的限定器，用于限定符号
while b & mask != 0:
carry = （a&b) << 1; a = a^b; b = carry ###备注这里b表示进位值，a表示原位值

mask = 0xffffffff构造了一个32位整数的限定器，用于限定符号
while b & mask != 0: #因为mask为确定值且不为0， 则此处b != 0 或者防止进位值过大
carry = （a&b) << 1; a = a^b; b = carry ###备注这里b表示进位值，a表示原位值
python里面整型无限长，因此需要对其2**32取模使得33位及以上均为0，则当b > mask时， 需返回a & mask，否则返回a

NO.397 整数替换
法一：递归法
n为偶数， n = n /2， 计数器加1
n为奇数： n = n + 1或 n - 1里面较小的那个，
n == 1时跳出
if n == 1: return 0
elif n % 2 == 0: return 1 + self.integerReplacement(n // 2)
else: return 1 + min(self.integerReplacement(n + 1), self.integerReplacement(n - 1))

法二：位操作
n为偶数， n = n /2 #实际处理中，与1做与运算，若为0，则为偶数，并且向右移1位
n为奇数，若n的二进制后两位为01（即跟2做与操作为0），或者n==3： n = n-1
        若若n的二进制后两位为11，则n = n + 1
while n != 1:
if n & 1 == 0: n >>= 1
else: if n & 2 ==0 or n == 3: n -=1
      else: n += 1
count += 1

reduce函数：对参数序列中的元素进行累积
reduce(function函数，iterable可迭代对象）：用传给reduce中的function先对集合的第1、2个元素进行操作，
得到的结果再按照function的规则与第三个数进行运算
