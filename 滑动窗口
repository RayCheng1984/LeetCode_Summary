NO.239 滑动窗口最大值
deque = double-end queue双端队列
collections是python的标准库，数据结构的常用模块，collections包含了一些特殊容器：
deque()双向队列：可以快速的在队列头部和尾部添加、删除元素
Counter()计数器：dict的子类，计算可hash对象
defaultdict()默认字典：dict的子类，可以调用提供默认值的函数
OrderedDict()有序字典：dict的子类，可以记住元素的添加顺序
namedtuple()可命名元组：可以创建包含名称的元组

deque()是栈和队列的一种广义实现，double-end queue，能在deque的两端插入和删除元素
append()：从右端插入元素
appendleft()：从左端插入元素
extend()：从右端逐个添加可迭代对象（如列表，元组，字典，字符串）
extendleft()：从左端逐个添加可迭代对象
pop():移除列表中的元素（默认最右边），并返回该元素的值，如果没有元素，将会报indexError
popleft():移除列表最左端的元素
count()：统计列表中元素的个数
inseer(index, obj)：在指定位置插入元素
rotate(n):从右侧翻转n步，如果是负数则从左侧翻转
clear()：将deque()中的元素全部清除，最后长度为0
remove()：移除第一次出现的元素，如果没有找到，则报valueError
maxlen():只读属性，deque()的最大限度长度，如果没有就返回NOne，当长度超过限制时，另一边的项会自动删除。

enumerate():用于将一个可遍历的数据对象（如列表、元组、字符串）组合为一个索引序列，同时列出数据和下标
enumerate(iterable, start):两个参数，一个可迭代对象和一个可选的起始索引值。
iterable:一个可迭代对象，如列表、元组等
start():计数的起始值，默认为为0，start参数自定义索引的起始值

法一：在两端插入和删除，使用双端队列，并且需要保持单调性；双端队列里保存的是索引
该问题可分为三步：
1、入： 先判断：对于双端队列里小于当前值的，全部删除while q and nums[q[-1]] < num： q.pop()，然后将当前值的索引添加到队列里q.append(i)
2、出：如果队列长度已经大于窗口k，则删除队首元素if i - q[0] + 1 > k: q.popleft()
3、记录答案：if i >= k-1: ans.append(nums[q[0]])

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        ans = []
        q = deque()
        for i, num in enumerate(nums):
            #1、进入，先判断，队列里小于当前值的，全部删除，注意队列里存的是值的索引
            while q and nums[q[-1]] < num:
                q.pop()
            q.append(i)
            #2、出，对于已经超过窗口的数，直接删除
            if i - q[0] + 1 > k:
                q.popleft()
            #3、这里最难理解，序列从0开始，所以只有i >= k-1时才开始存储，前面的不是一个完整窗口，再往后前面操作完成第一个值是最大值，因为双端队列保持了单调性
            if i >= k -1:
                ans.append(nums[q[0]])     
        return ans

法二：暴力解法：枚举所有窗口，找到每个窗口的最大值，然后将每个窗口最大值放入输出列表中，一共n-k+1个滑动窗口
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        if n * k == 0:
            return []        
        ans = []
        for i in range(0, n-k+1):
            max_val = - sys.maxsize - 1
            for j in range(i, i + k):
                max_val = max(max_val, nums[j])   
            ans.append(max_val)
        return ans


NO.76 最小覆盖子串
