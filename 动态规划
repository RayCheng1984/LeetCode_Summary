动态规划的核心在于找到状态转移方程和处理边界条件。dp数组，通常右下角时最大规模。表格中每个子格都是一个小问题，填表的过程就是解决小问题的过程。
动态规划3个问题进行拆解：
1、问题是否分阶段，阶段是什么？
2、与问题最优解有关的子问题是什么？
3、透过不同阶段、最优解和子问题，我们应当关注的状态具体是什么？

NO.70 爬楼梯
法一：动态规划
#[0]*n意味着建立一个一行n列的数组，此问题里之所以建立[0]*（n+1）的数组是因为将第0个设置一个值比较方便后续操作，这样数组的第i个数和实际的i是对应的。
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        dp = [0] * (n+1)
        dp[1], dp[2] = 1, 2
        for i in range(3, n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]
    
法二：转化为求斐波那契数列的第n项，只有初始值不一样,f(0) = 0, f(1) = 1, f(2) = 2
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n

        first, second = 1, 2
        for i in range(3, n + 1):
            first, second = second, first + second        
        return second
    
NO.62 不同路径
法一：动态规划
如果只有一行或者一列,到达目的网格只有一种走法；如果多行多列，那么到达目的网格只能从它的上方或者左侧走，则其动态规划方程为dp[i][j] = dp[i-1][j] + dp[i][j-1]
最后返回dp[m-1][n-1]，因为数组的序号是从0开始的，0倒m-1个总共m行。
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1 for i in range(n)] for j in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]
法二：杨辉三角形，每个位置的路径 = 该位置左边的路径 + 该位置右边的路径
杨辉三角形和组合数是等价的，组合为从m+n-2里面选m-1个, 即用factorial阶乘函数(m+n-2)!/(m-1)/(m+n-2-(m-1))! = (m+n-2)!/(m-1)!/(n-1)!
return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))

NO.198  打家劫舍
如果只有一间，则偷；两件房屋，偷价值高的那间；
对于多间房屋：若偷第k间，则不能偷第k-1间，总和为dp[k-2] + nums[i];  若不偷第k间，则总额为前k-1间的总额
则状态转移方程为dp[i] = max(dp[i-2] + nums[i], dp[i-1])
法一：动态规划
def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        
        dp = [0] * n
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])

        for i in range(2, n):
            dp[i] = max(dp[i-2] + nums[i], dp[i-1])      
        return dp[n-1]
法二： 动态规划 + 滚动数组， 每间房屋的最高值只跟前两间房屋的最高总额有关，在每个时刻只需要存储前两间的最高总额
def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        
        first, second = nums[0], max(nums[0], nums[1])
        for i in range(2, n):
            first, second = second, max(first + nums[i], second)
        
        return second

NO.213 打家劫舍II
同打家劫舍I，若只有一间，偷之；若有两间，选择金额较高的那间
对于多间房屋，不能同时偷第一间和最后一间，若偷了第一间，则不能偷最后一间，房屋下标范围是[0, n-2]， 若偷了最后一间，则不能偷第一间，房屋下标范围是[1, n-1]
剩下的用打家劫舍I的方法解决，最后选其中价值最高的一种。
需要建立一个函数，来寻找最大值，需要两个参数，开始下标start和结束下标end，因为这里不一定从0开始计数，若使用range函数,则end下标需要+1。
因为前两个值为边界值，另外确定，所以开始值从start+2开始。
使用动态规划 + 滚动数组，同样只需要存储前两个房间的金额。
def rob(self, nums: List[int]) -> int:
        def robRange(start, end):
            first, second = nums[start], max(nums[start], nums[start + 1])
            for i in range(start + 2, end + 1):
                first, second = second, max(first + nums[i], second)
            return second
        
        n = len(nums)
        if n == 1:
            return nums[0]
        elif n == 2:
            return max(nums[0], nums[1])
        else:
            return max(robRange(0, n-2), robRange(1, n-1))
        
