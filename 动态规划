动态规划的核心在于找到状态转移方程和处理边界条件。dp数组，通常右下角时最大规模。表格中每个子格都是一个小问题，填表的过程就是解决小问题的过程。
动态规划3个问题进行拆解：
1、问题是否分阶段，阶段是什么？
2、与问题最优解有关的子问题是什么？
3、透过不同阶段、最优解和子问题，我们应当关注的状态具体是什么？

NO.70 爬楼梯
法一：动态规划
#[0]*n意味着建立一个一行n列的数组，此问题里之所以建立[0]*（n+1）的数组是因为将第0个设置一个值比较方便后续操作，这样数组的第i个数和实际的i是对应的。
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        dp = [0] * (n+1)
        dp[1], dp[2] = 1, 2
        for i in range(3, n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]
    
法二：转化为求斐波那契数列的第n项，只有初始值不一样,f(0) = 0, f(1) = 1, f(2) = 2
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        first, second = 1, 2
        for i in range(3, n+1):
            second = first + second
            first = second -first
        return second
    
NO.62 不同路径
法一：动态规划
如果只有一行或者一列,到达目的网格只有一种走法；如果多行多列，那么到达目的网格只能从它的上方或者左侧走，则其动态规划方程为dp[i][j] = dp[i-1][j] + dp[i][j-1]
最后返回dp[m-1][n-1]，因为数组的序号是从0开始的，0倒m-1个总共m行。
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1 for i in range(n)] for j in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]
法二：杨辉三角形，每个位置的路径 = 该位置左边的路径 + 该位置右边的路径
杨辉三角形和组合数是等价的，组合为从m+n-2里面选m-1个, 即用factorial阶乘函数(m+n-2)!/(m-1)/(m+n-2-(m-1))! = (m+n-2)!/(m-1)!/(n-1)!
return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))
