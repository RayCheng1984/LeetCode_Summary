动态规划的核心在于找到状态转移方程和处理边界条件。dp数组，通常右下角时最大规模。表格中每个子格都是一个小问题，填表的过程就是解决小问题的过程。
动态规划3个问题进行拆解：
1、问题是否分阶段，阶段是什么？
2、与问题最优解有关的子问题是什么？
3、透过不同阶段、最优解和子问题，我们应当关注的状态具体是什么？

NO.70 爬楼梯
法一：动态规划
#[0]*n意味着建立一个一行n列的数组，此问题里之所以建立[0]*（n+1）的数组是因为将第0个设置一个值比较方便后续操作，这样数组的第i个数和实际的i是对应的。
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n
        dp = [0] * (n+1)
        dp[1], dp[2] = 1, 2
        for i in range(3, n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]
    
法二：转化为求斐波那契数列的第n项，只有初始值不一样,f(0) = 0, f(1) = 1, f(2) = 2
def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n

        first, second = 1, 2
        for i in range(3, n + 1):
            first, second = second, first + second        
        return second
    
NO.62 不同路径
法一：动态规划
如果只有一行或者一列,到达目的网格只有一种走法；如果多行多列，那么到达目的网格只能从它的上方或者左侧走，则其动态规划方程为dp[i][j] = dp[i-1][j] + dp[i][j-1]
最后返回dp[m-1][n-1]，因为数组的序号是从0开始的，0倒m-1个总共m行。
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1 for i in range(n)] for j in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m-1][n-1]
法二：杨辉三角形，每个位置的路径 = 该位置左边的路径 + 该位置右边的路径
杨辉三角形和组合数是等价的，组合为从m+n-2里面选m-1个, 即用factorial阶乘函数(m+n-2)!/(m-1)/(m+n-2-(m-1))! = (m+n-2)!/(m-1)!/(n-1)!
return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))

NO.198  打家劫舍
如果只有一间，则偷；两件房屋，偷价值高的那间；
对于多间房屋：若偷第k间，则不能偷第k-1间，总和为dp[k-2] + nums[i];  若不偷第k间，则总额为前k-1间的总额
则状态转移方程为dp[i] = max(dp[i-2] + nums[i], dp[i-1])
法一：动态规划
def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        
        dp = [0] * n
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])

        for i in range(2, n):
            dp[i] = max(dp[i-2] + nums[i], dp[i-1])      
        return dp[n-1]
法二： 动态规划 + 滚动数组， 每间房屋的最高值只跟前两间房屋的最高总额有关，在每个时刻只需要存储前两间的最高总额
def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        
        first, second = nums[0], max(nums[0], nums[1])
        for i in range(2, n):
            first, second = second, max(first + nums[i], second)
        
        return second

NO.213 打家劫舍II
同打家劫舍I，若只有一间，偷之；若有两间，选择金额较高的那间
对于多间房屋，不能同时偷第一间和最后一间，若偷了第一间，则不能偷最后一间，房屋下标范围是[0, n-2]， 若偷了最后一间，则不能偷第一间，房屋下标范围是[1, n-1]
剩下的用打家劫舍I的方法解决，最后选其中价值最高的一种。
需要建立一个函数，来寻找最大值，需要两个参数，开始下标start和结束下标end，因为这里不一定从0开始计数，若使用range函数,则end下标需要+1。
因为前两个值为边界值，另外确定，所以开始值从start+2开始。
使用动态规划 + 滚动数组，同样只需要存储前两个房间的金额。
def rob(self, nums: List[int]) -> int:
        def robRange(start, end):
            first, second = nums[start], max(nums[start], nums[start + 1])
            for i in range(start + 2, end + 1):
                first, second = second, max(first + nums[i], second)
            return second
        
        n = len(nums)
        if n == 1:
            return nums[0]
        elif n == 2:
            return max(nums[0], nums[1])
        else:
            return max(robRange(0, n-2), robRange(1, n-1))
        
NO.322 零钱兑换
动态规划：初始阶段将数组元素默认值设置为大于最大可能数的值，可以用amount + 1， 也可以用inf等值，遍历后如果所需硬币数仍是amount+1，说明没有方法凑出这个数，返回-1
用dp[i]表示凑成金额i所需的最少硬币数，其中dp[0]表示金额为0时，数组长度为amount + 1, 因为有0存在
遍历每个硬币for coin in coins, 从coin到amount进行遍历，取初始值和dp[i-coin]+1里面的最小值
如果最后还是amount+1说明无法组成，返回-1，其他情况返回dp[amount]即第amount个数组的值。
def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [amount + 1] * (amount + 1)
        dp[0] = 0
        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] = min(dp[i], dp[i-coin] + 1)
        return dp[amount] if dp[amount] != (amount +1) else -1


NO.518 零钱兑换II(完全背包问题）
背包问题：给定一组物品，每种物品的重量和价格，在限定的总重量内，如何选择才能使物品的总价格最高。背包问题分为两种：0——1背包和完全背包。
0-1背包：限定每件物品最多只能取一次，状态转移方程：dp[i][j] = max(dp[i-1][j], dp[i-1][j-wi] + vi)
完全背包：每件物品可以选取无限次, 状态转移方程：0 <= wi <= j
背包问题有两种要求：一种恰好装满背包，初始化是dp[i][0] = 0, dp[i][1,2,3...] = -oo，因为此时只有容量为0的背包可能被价值为0的nothing装满，其他容量背包属于未定义状态。
不超过背包容量，初始化时应将dp[*][*]全部设置为0，因为对于任何一个背包，都有一个合法解什么都不装，价值为0
动态规划是解决背包问题的常用解法
初始化：
dp[0][0] = 1：从前0种硬币中选出若干个组成金额0，对应的组合有1种
先遍历硬币，后遍历背包，求得的是组合数目，即硬币选出的顺序不重要
如果求排列数目，不同的硬币选出顺序当作不同的方案，需要先遍历背包，然后遍历硬币

先初始化，建立数组，长度为amount+1, 其中dp[0] = 1凑出金额0的方案只有一种
完全背包优化后的状态转移，第一层循环遍历硬币，第二层遍历背包（正序）
def change(self, amount: int, coins: List[int]) -> int:
        dp = [0] * (amount + 1)
        dp[0] = 1
        for coin in coins:
            for j in range(coin, amount + 1):
                dp[j] += dp[j-coin]
        return dp[amount]
                        
