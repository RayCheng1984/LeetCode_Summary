NO.704 二分查找
low = 0, high = len(nums) - 1
while low <= high:
  mid = (low + high) // 2 # Python整型不会溢出，这样写可以；但其他语言可能溢出， mid = low + (high-low)// 2
  if nums[mid] == target:
    return mid
  elif nums[mid] < target:
    low = mid + 1
  else:
    high = mid - 1
return -1

NO.153 寻找旋转排序数组中的最小值
中间元素nums[mid]和最后一个元素有关系
nums[mid] > nums[-1]: 则元素在[mid + 1, high]中
nums[mid] < nums[-1]: 则元素在[low, mid]中
当low == high时，只剩下最后一个元素，即为最小值。

NO.875   爱吃香蕉的珂珂
二分查找， 最慢1， 最快max(piles)即一小时必须得吃一堆
while left <= high时
如果吃完所有香蕉用时 > h: 则left = mid + 1
否则，吃太快：right = mid
最后返回low

NO.69 x的平方根
low 0, high = x
mid ** 2 < x and (mid + 1)**2 >x: return mid
elif mid **2 > x: high = mid - 1
else: low = mid + 1
return low

NO.162 寻找峰值
中间元素 < 右侧元素， 在右侧区域找
中间元素 < 左侧元素， 在左侧区域找
low = 0, high = len(nums) - 1
if mid + 1 < len(nums) and nums[mid] < nums[mid + 1]: low = mid + 1
elif mid - 1>= 0 and nums[mid] < nums[mid - 1]: high = mid- 1
else: return mid

NO.410 分割数组的最大值
最大值最小化或者最小值最大化一般都是用二分查找
最小值：分割成n个数组，则最大值为max(nums), 最大值：分为一个数组，则最大值为sum(nums)
初始化sum = 0, count = 1
def helper(x):
  for num in nums:
  if sum + num <= x: sum += num
  else: sum = num, count += 1
  return count <=k

low = max(nums), high = sum(nums)
if low == high: return low
elif helper(mid): high = mid
else: low = mid + 1

bisect是python内置的二分查找库，查找给定值在有序列表中的插入位置
bisect_left(a, x, lo = 0, hi=len(a)):在a序列中找到x的插入点以保持排序顺序， lo和hi用于指定应考虑的列表子集，默认使用整个列表。如果x已经在
a中，则插入点位于现有条目之前。
bisect_right(a, x, lo = 0, hi = len(a)与bisect一样：类似bisect_left，返回的插入点位于a中x的任何现有条目之后。
