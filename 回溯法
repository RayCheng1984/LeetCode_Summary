NO.39 组合总和I
回溯法的模板：
def dfs(index, cur, path):
    if cur == target: #结束条件有两个：1找到解，2搜索完毕
        ans.append(path.copy())
        return
    if index == n:
        return
    
    for num in nums:#考虑可能的解，进入下一层递归
        if num == error or num in visited: #忽略非法解
            continue
        visited.add(num)#更新状态，添加到访问记录里
        path.append(num)
        dfs(index + 1, cur + num, path)
        path.pop()#恢复状态
        visited.remove(num)
其中index是数组的位置信息，cur表示当前路径上的某个信息，在这个题里就是target每次减去上次选的那个数，path是路径

法一：
def dfs(index, cur, path):
            if cur == 0:#递归结束有两个条件，1是找到解，2是搜索完毕
                ans.append(path[:])
                return
            if index == n:
                return
            
            if candidates[index] <= cur: #加入这个数字，其中cur在这里指target减去上一个选择的数剩下的值
                path.append(candidates[index]) 
                dfs(index, cur - candidates[index], path) #index不变，继续考虑当前数字
                path.pop() #消除影响

            dfs(index + 1, cur, path)#不加入当前数字，那么考虑下一个数字
        
        ans = []
        n = len(candidates)
        dfs(0, target, [])
        return ans

法二：
回溯三问：1、当前操作：枚举path[i]要填入的字母；2、子问题：构造字符串>=i的部分；3、下一个子问题
def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序后可以进行剪枝优化

        def dfs(i, left): #left表示剩下的
            if left == 0:
                ans.append(path.copy()) #是一条路径，复制后添加到答案中，每次都要复制一下，因为每条路径都是一个数组
                return
            if i == len(candidates) or left < candidates[i]: #遍历到最后或者剩下的数都太大，无法凑成则结束
                return
            #i < n时
            path.append(candidates[i]) #选了该数，则添入路径
            dfs(i, left - candidates[i]) #选之后继续向下递归，此时left变了要减去当前值
            path.pop() #恢复现场

            dfs(i+1, left) #不选
        dfs(0, target) #递归入口
        return ans

子集型回溯两种模板：
一、选不选
ans = []
path = []
n = len(nums)
def dfs(i):
    if i == n:
        ans.append(path.copy)
        return
        path.append(nums[i])
        dfs(i+1)
        path.pop()
二、枚举选哪个
ans = []
path = []
n = len(nums)
def dfs(i):
    ans.append(path.copy())
    if i == n:
    return
    for j in range(i, n):
        path.append(nums[i])
        dfs(i+1)
        path.pop()
dfs(0)
return ans

NO.40 组合总和II
整体类似组合总和I，但是因为不能包含重复组合，所以需稍加改变
def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序有利于剪枝

        def dfs(i, left):
            if left == 0: #找到答案，将该路径保存
                ans.append(path.copy())
                return
            if i == len(candidates) or left < candidates[i]: #没有可以选的数字无法凑成target，返回
                return
            
            path.append(candidates[i]) #选
            dfs(i+1, left - candidates[i]) #因为数字不能重复，深度遍历去掉当前数字
            path.pop() #恢复现场

            temp = candidates[i] #用变量保存当前值，因为要与后面的值比较
            i += 1
            while i < len(candidates) and  candidates[i] == temp: #当下个值与当前值相等
                i += 1 #考虑下个变量
            dfs(i, left) #对改变后的值进行遍历
        
        dfs(0, target) #遍历入口
        return ans

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序有利于剪枝

        def dfs(i, left):
            if left == 0: #找到答案，将该路径保存
                ans.append(path.copy())
                return
            if i == len(candidates) or left < candidates[i]: #没有可以选的数字无法凑成target，返回
                return
            
            path.append(candidates[i]) #选
            dfs(i+1, left - candidates[i]) #因为数字不能重复，深度遍历去掉当前数字
            path.pop() #恢复现场

            j = i+1 #不选
            while j < len(candidates) and candidates[j] == candidates[i]: #用变量j代替进行比较
                j += 1
            dfs(j, left)
        
        dfs(0, target) #遍历入口
        return ans

NO.78 子集
法一：回溯法
def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        path = []

        def dfs(i):
            if i == len(nums):
                ans.append(path.copy())
                return
            
            path.append(nums[i]) #选(此时i<n)
            dfs(i+1) 
            path.pop()

            dfs(i+1) #不选
        
        dfs(0) #递归入口
        return ans

法二：
def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = [[]]

        for i in range(len(nums)):
            for j in range(len(ans)):
                ans.append(ans[j] + [nums[i]]) #每次循环将之前数组复制一遍，在复制的里面加入当前数字，再添加到答案数组后面
        return ans
法三：二进制
<<左移，相当于乘以2^i, >>右移，相当于除以2^i
(s >> i) & 1 = 1判断该元素属于集合，(s >> i) & 1 = 0该元素不属于集合
def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        n = len(nums)
        for i in range(1 << n): #枚举所有位掩码
            path = [nums[j] for j in range(n) if i >> j & 1]#将当前位掩码选择的子集加入答案
            ans.append(path)
        return ans

NO.46 全排列
法一：调用库函数
itertools.permutaions()是python itertools模块中的一个函数，用于生成给定可迭代对象的所有可能排列
itertools.permuations(iterable, r = None):iterable要生成排列的可迭代对象，如列表、元组、字符串等； r为排列的长度，如果未指定，默认与iterable长度相同
def permute(self, nums: List[int]) -> List[List[int]]:
        return list(itertools.permutations(nums))

法二：全排列函数的实现
def permute(self, nums: List[int]) -> List[List[int]]:
        ans = []
        def dfs(start, end):
            if start == end:#两个指针重合，意味着已经填满所有位置，添加该组合
                ans.append(nums.copy())
            for i in range(start, end):
                nums[start], nums[i] = nums[i], nums[start]#交换位置
                dfs(start + 1, end)#两个参数，从start+1到end
                nums[start], nums[i] = nums[i], nums[start]#恢复现场
        dfs(0, len(nums))
        return ans
法三：
从第一个位置开始，依次将每个数字放在当前位置；对于每个放置的数字，递归的生成剩余数字的全排列；当所有位置都填满后，得到一个完整的排列，将其添加到结果中；然后回溯到上一步，尝试其他可能性。
当递归到最深层时，将当前排列的副本加入结果列表
def permute(self, nums: List[int]) -> List[List[int]]:
        ans = []
        def dfs(i): #在每层递归中，固定一个i位置的元素
            if i == len(nums):#i
                ans.append(nums.copy())
            for j in range(i, len(nums)):
                nums[i], nums[j] = nums[j], nums[i]#将i位置的元素与后续元素交换
                dfs(i+1)#递归处理下一个位置i+1
                nums[i], nums[j] = nums[j], nums[i]#恢复现场
        dfs(0)
        return ans

法二和法三本质上一样，只是将一个交换参数放在函数内部

法四：
数组path记录已选的数字，集合s记录未选的数字
从s中枚举要填入path[i]的数；然后构造排列>=i的部分；构造排列>=i+1的部分
def permute(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        ans = []
        path = [0] * n

        def dfs(i, s):
            if i == n: 
                ans.append(path.copy())
                return
            for x in s: #剩下没选的，本质上是i<n
                path[i] = x#将当前数字添加到路径里
                dfs(i+1, s - {x}) #子问题继续递归i+1,集合要减去一个
        dfs(0, set(nums))
        return ans

法五：（更通用的做法）用布尔数组，标记数字是否在path中:如果在数组中，则将flag[i]设置为True
def permute(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        ans = []
        path = [0] * n
        flag = [False] * n#创建标记数组

        def dfs(i):
            if i == n:
                ans.append(path.copy())
            for j in range(n): #注意这里枚举的是没有选择的数，下标为j; i为排列的第i个位置
                if not flag[j]:#没有选j
                    path[i] = nums[j] #则选之
                    flag[j] = True #j标记为已选
                    dfs(i+1) #递归下一个
                    flag[j] = False #恢复现场
        dfs(0)
        return ans

回溯法解题模板：
void backtrack(参数){
    if (终止条件){
        存放结果;
        return;
}
    for(选择：本层集合中的元素){
        处理节点;
        backtrack(参数);
        撤销处理;
}
}

NO.37 解数独
