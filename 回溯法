NO.39 组合总和I
回溯法的模板：
def dfs(index, cur, path):
    if cur == target: #结束条件有两个：1找到解，2搜索完毕
        ans.append(path.copy())
        return
    if index == n:
        return
    
    for num in nums:#考虑可能的解，进入下一层递归
        if num == error or num in visited: #忽略非法解
            continue
        visited.add(num)#更新状态，添加到访问记录里
        path.append(num)
        dfs(index + 1, cur + num, path)
        path.pop()#恢复状态
        visited.remove(num)
其中index是数组的位置信息，cur表示当前路径上的某个信息，在这个题里就是target每次减去上次选的那个数，path是路径

法一：
def dfs(index, cur, path):
            if cur == 0:#递归结束有两个条件，1是找到解，2是搜索完毕
                ans.append(path[:])
                return
            if index == n:
                return
            
            if candidates[index] <= cur: #加入这个数字，其中cur在这里指target减去上一个选择的数剩下的值
                path.append(candidates[index]) 
                dfs(index, cur - candidates[index], path) #index不变，继续考虑当前数字
                path.pop() #消除影响

            dfs(index + 1, cur, path)#不加入当前数字，那么考虑下一个数字
        
        ans = []
        n = len(candidates)
        dfs(0, target, [])
        return ans

法二：
回溯三问：1、当前操作：枚举path[i]要填入的字母；2、子问题：构造字符串>=i的部分；3、下一个子问题
def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序后可以进行剪枝优化

        def dfs(i, left): #left表示剩下的
            if left == 0:
                ans.append(path.copy()) #是一条路径，复制后添加到答案中，每次都要复制一下，因为每条路径都是一个数组
                return
            if i == len(candidates) or left < candidates[i]: #遍历到最后或者剩下的数都太大，无法凑成则结束
                return
            
            path.append(candidates[i]) #选了该数，则添入路径
            dfs(i, left - candidates[i]) #选之后继续向下递归，此时left变了要减去当前值
            path.pop() #恢复现场

            dfs(i+1, left) #不选
        dfs(0, target) #递归入口
        return ans

子集型回溯两种模板：
一、选不选
ans = []
path = []
n = len(nums)
def dfs(i):
    if i == n:
        ans.append(path.copy)
        return
        path.append(nums[i])
        dfs(i+1)
        path.pop()
二、枚举选哪个
ans = []
path = []
n = len(nums)
def dfs(i):
    ans.append(path.copy())
    if i == n:
    return
    for j in range(i, n):
        path.append(nums[i])
        dfs(i+1)
        path.pop()
dfs(0)
return ans

NO.40 组合总和II
整体类似组合总和I，但是因为不能包含重复组合，所以需稍加改变
def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序有利于剪枝

        def dfs(i, left):
            if left == 0: #找到答案，将该路径保存
                ans.append(path.copy())
                return
            if i == len(candidates) or left < candidates[i]: #没有可以选的数字无法凑成target，返回
                return
            
            path.append(candidates[i]) #选
            dfs(i+1, left - candidates[i]) #因为数字不能重复，深度遍历去掉当前数字
            path.pop() #恢复现场

            temp = candidates[i] #用变量保存当前值，因为要与后面的值比较
            i += 1
            while i < len(candidates) and  candidates[i] == temp: #当下个值与当前值相等
                i += 1 #考虑下个变量
            dfs(i, left) #对改变后的值进行遍历
        
        dfs(0, target) #遍历入口
        return ans

def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        ans = []
        path = []
        candidates.sort() #排序有利于剪枝

        def dfs(i, left):
            if left == 0: #找到答案，将该路径保存
                ans.append(path.copy())
                return
            if i == len(candidates) or left < candidates[i]: #没有可以选的数字无法凑成target，返回
                return
            
            path.append(candidates[i]) #选
            dfs(i+1, left - candidates[i]) #因为数字不能重复，深度遍历去掉当前数字
            path.pop() #恢复现场

            j = i+1 #不选
            while j < len(candidates) and candidates[j] == candidates[i]: #用变量j代替进行比较
                j += 1
            dfs(j, left)
        
        dfs(0, target) #遍历入口
        return ans

NO.78 子集
