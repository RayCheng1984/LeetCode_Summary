NO.877 石子游戏
法一：数学法
因为石子总数是奇数，给石堆编号，奇数编号的总石子数相比偶数编号的总石子数，总有一个大于另外一个。
如果石堆数是偶数，且只能从开始或结束处取走石堆，先手玩家能够单方面决定选取石堆的奇偶性，因此先手玩家必胜，返回True

法二：动态规划
动态规划是连续的，上一个状态和下一个状态之间有关系且连续
dp[i][j]:表示先手玩家与后手玩家在区间[i,j]之间拿，先手玩家比后手玩家多的最大石子个数。这是个差值，而且是最大差值。
对于先手玩家，有两种拿法：
拿开头的piles[i], 则区间[i+1, j]只能由后手玩家选择，则dp[i+i][j]表示的是在该区间内，后手玩家比先手玩家多的最大石子数，
反过来-dp[i+i][j]是先手比后手多的石子数，则状态转移方程:dp[i][j] = piles[i] + (-dp[i+1][j])

拿结尾的piles[j], 则区间[i, j-1]由后手玩家选择， dp[i][j-1]表示后手玩家在这个区间内比先手玩家多的最大石子数，反过来
-dp[i][j-1]是在该区间内，先手玩家比后手玩家多的最大石子数，状态转移方程：dp[i][j]=piles[j] + (-dp[i][j-1])

在这两种情况中，选择石子数差更大的一种情况，dp[i][j] = max(piles[i] - dp[i+1][j], piles[j] - dp[i][j-1])
def stoneGame(self, piles: List[int]) -> bool:
        n = len(piles)
        dp = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            dp[i][i] = piles[i]
        for i in range(n-1, -1, 1):
            for j in range(i+1, n, 1):
                dp[i][j] = max(piles[i] - dp[i+1][j], piles[j] - dp[i][j-1])
        return dp[0][n-1] >= 0
