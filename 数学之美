一、两数之和
建立值——索引值键值对，找到值后，通过字典找到索引值
return [map[target-nums[i]], i]
map[nums[i]] = i

二、三数之和(速度最快版本）
先排序
如果nums[i]>0:break
如果nums[i]==nums[i-1]:continue
然后通过i、l、r三个指针判断nums[i]+nums[l]+nums[r]与0的关系：
nums[i]+nums[l]+nums[r]<0:
  l=l+1
nums[i]+nums[l]+nums[r]>0:
  r=r-1
nums[i]+nums[l]+nums[r]=0:
  res.append([]):
  l+1
  r-1
  while l<r and nums[l]==nums[l-1]:
    l+1
  while l<r and nums[r]==nums[r+1]:#此处重点注意，左指针要与l-1比较，右指针要与r+1比较，否则给出的测试用例虽然能通过，但是一部分案例会出错。
    r-1

三、四数之和
采用三数之和的思想，两重循环+两个指针
第一重循环三种条件i>0 and nums[i]==nums[i-1]:continue
第二重循环j要在i+1及len(nums)-1之间以及j>a+1且nums[j]==nums[j-1]时continue
其他与三数之和类似


四、四数相加II
两两组合，两个双重循环
难点：使用map.get()方法
map.get（i+j, 0) + 1意味着当找到i+j时执行get[i+j]+1, 如果没找到，执行0+1

五、最接近的三数之和
一重循环+两个指针
找数可以排序，找索引值用字典
res存储num[0]+nums[1]+nums[2]的值，如果有更小的就更新，没有就返回res
注意指针问题都需保证i>0且循环时左指针<右指针

六、最大子数组和
（一）动态规划
构造一个新数组，返回新数组的最大值
如果前一个数大于0，那么将它加到当前元素上
if nums[i-1]>0:
  nums[i] += nums[i-1]
（二）贪心算法
当前元素之前的和小于0，则丢弃当前元素之前的数列
cur_sum = max_sum = nums[0]
cur_sum = max(cur_sum, nums[i])
max_sum = max(cur_sum, max_sum)

七、最大数
自定义比较比较，然后降序排列，最后以字符串形式拼接起来。
当由多个0组成时，返回'000'格式会报错，应当返回'0'

functools.cmp_to_key()将传统的比较函数转换为关键字函数，以便与sorted()、sort()等函数兼容
join函数用于连接字符串，语法：'连接符'.join(字符串序列)
sort默认升序，即reverse=False, 降序需改为reverse=True

八、分数到小数
若整除，返回str(numerator // denominator)
若符号不一致， ans += '-'，ans += (numerator // denominator), numerator = numerator % denominator
如果numerator != 0:
使用字典，当numerator在字典里时，根据其索引值返回f'{ans[:temp]}({ans[temp:]})'
如果不在字典里，建立键值对map[numerator] = len(ans)小数的索引值正好对应答案字符串的长度 numerator *=10, ans+=(numerator // denominator), numerator = numerator % denominator

九、最大整除子集（这道题目还是不太明白）
对数组排序，然后将每项拆分成数组，及形成数组的数组
建立一个最大序列用来存储结果
两重循环i，j, 判断nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1,成立则将dp[i]更新为dp[j] + nums[i:i+1]
比较len(dp[i])与len(最大序列的长度）,成立则将len(最大序列）更新为dp[i]
最后返回最大序列
